.nh
.TH "GH-CACHE-LIST" "1" "Apr 2024" "GitHub CLI 2.47.0" "GitHub CLI manual"

.SH NAME
.PP
gh-cache-list - List Github Actions caches


.SH SYNOPSIS
.PP
\fBgh cache list [flags]\fR


.SH OPTIONS
.TP
\fB-q\fR, \fB--jq\fR \fB<expression>\fR
Filter JSON output using a jq expression

.TP
\fB--json\fR \fB<fields>\fR
Output JSON with the specified fields

.TP
\fB-k\fR, \fB--key\fR \fB<string>\fR
Filter by cache key prefix

.TP
\fB-L\fR, \fB--limit\fR \fB<int> (default 30)\fR
Maximum number of caches to fetch

.TP
\fB-O\fR, \fB--order\fR \fB<string> (default "desc")\fR
Order of caches returned: {asc|desc}

.TP
\fB-r\fR, \fB--ref\fR \fB<string>\fR
Filter by ref, formatted as refs/heads/ or refs/pull//merge

.TP
\fB-S\fR, \fB--sort\fR \fB<string> (default "last_accessed_at")\fR
Sort fetched caches: {created_at|last_accessed_at|size_in_bytes}

.TP
\fB-t\fR, \fB--template\fR \fB<string>\fR
Format JSON output using a Go template; see "gh help formatting"


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.TP
\fB-R\fR, \fB--repo\fR \fB<[HOST/]OWNER/REPO>\fR
Select another repository using the [HOST/]OWNER/REPO format


.SH EXAMPLE
.EX
# List caches for current repository
$ gh cache list

# List caches for specific repository
$ gh cache list --repo cli/cli

# List caches sorted by least recently accessed
$ gh cache list --sort last_accessed_at --order asc

# List caches that have keys matching a prefix (or that match exactly)
$ gh cache list --key key-prefix

# To list caches for a specific branch, replace <branch-name> with the actual branch name
$ gh cache list --ref refs/heads/<branch-name>

# To list caches for a specific pull request, replace <pr-number> with the actual pull request number
$ gh cache list --ref refs/pull/<pr-number>/merge

.EE


.SH SEE ALSO
.PP
\fBgh-cache(1)\fR
